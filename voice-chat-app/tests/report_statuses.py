"""Generate a Markdown summary for recorded test results."""

from __future__ import annotations

import argparse
import json
import os
from pathlib import Path


def _load_results(report_path: Path) -> dict:
    if not report_path.exists():
        return {
            "overall_status": "unknown",
            "tests": [],
            "missing": True,
        }
    return json.loads(report_path.read_text(encoding="utf-8"))


def _build_table(results: dict) -> str:
    tests = results.get("tests", [])
    if not tests:
        return "No tests were executed."

    lines = ["| Test | Status |", "| --- | --- |"]
    for test in tests:
        icon = "✅ Pass" if test.get("passed") else "❌ Fail"
        lines.append(f"| {test.get('name', 'unknown')} | {icon} |")
    return "\n".join(lines)


def _render_summary(results: dict) -> str:
    status = results.get("overall_status", "unknown").capitalize()
    header = f"### Test Results — {status}"
    table = _build_table(results)
    return "\n".join([header, "", table, ""])


def write_summary(content: str, destination: Path) -> None:
    destination.parent.mkdir(parents=True, exist_ok=True)
    destination.write_text(content, encoding="utf-8")


def append_to_step_summary(content: str) -> None:
    summary_path = os.environ.get("GITHUB_STEP_SUMMARY")
    if summary_path:
        with open(summary_path, "a", encoding="utf-8") as handle:
            handle.write(content)
            if not content.endswith("\n"):
                handle.write("\n")


def set_step_outputs(summary: str, status: str) -> None:
    output_path = os.environ.get("GITHUB_OUTPUT")
    if not output_path:
        return
    with open(output_path, "a", encoding="utf-8") as handle:
        handle.write("summary<<EOF\n")
        handle.write(summary)
        if not summary.endswith("\n"):
            handle.write("\n")
        handle.write("EOF\n")
        handle.write(f"status={status}\n")


def main() -> None:
    parser = argparse.ArgumentParser(description="Render test result summaries")
    parser.add_argument(
        "--report",
        type=Path,
        default=Path("ci_reports/test_results.json"),
        help="Path to the JSON report generated by run_tests.py.",
    )
    parser.add_argument(
        "--write-summary",
        type=Path,
        help="Optional path to persist the generated Markdown summary.",
    )
    parser.add_argument(
        "--set-outputs",
        action="store_true",
        help="When provided, expose the summary and status via GitHub step outputs.",
    )
    parser.add_argument(
        "--suppress-print",
        action="store_true",
        help="Avoid printing the summary to stdout.",
    )

    args = parser.parse_args()

    results = _load_results(args.report)
    summary = _render_summary(results)
    status = results.get("overall_status", "unknown")

    if args.write_summary:
        write_summary(summary, args.write_summary)

    if args.set_outputs:
        set_step_outputs(summary, status)

    if not args.suppress_print:
        print(summary)
        append_to_step_summary(summary)


if __name__ == "__main__":
    main()
